# uses task, a multi-platform make replacement (https://taskfile.dev)
# on macos: `brew install go-task`
# on windows: `choco install -y go-task`

version: '3'

env:
  CONFIG: Release # or Debug
  EXTRA_OPTIONS:
  BUNDLED: 0
  MULTI: 0
  UNIVERSAL: 0

vars:
  VERSION: 0.2.0
  PLATFORM:
    sh: uname -s
  ARCH:
    sh: uname -m
  MIN_MAX_VERSION: 8
  MAX_MAX_VERSION: 9
  CHUCK_PACKAGE: "{{.HOME}}/Documents/Max\ 9/Packages/chuck-max"
  SCRIPTS: source/scripts
  BUILD: build
  THIRDPARTY: '{{.BUILD}}/thirdparty'
  LIB: '{{.THIRDPARTY}}/install/lib'
  CHUCK: '{{.THIRDPARTY}}/install/bin/chuck'
  DIST: '{{.BUILD}}//dist/chuck-max'
  ZIP: 'chuck-max-{{.VERSION}}-{{.ARCH}}.zip'
  DMG: 'chuck-max-{{.VERSION}}-{{.ARCH}}.dmg'
  ENTITLEMENTS: source/scripts/entitlements.plist
  CHUGINS_DIR: examples/chugins
  DEPS: '{{.SCRIPTS}}/dep'
  GENERATOR: '{{ if eq .PLATFORM "Darwin" }}-GXcode{{else}}{{end}}'

tasks:
  demo:
    desc: demonstration task
    cmds: 
      - echo $MULTI
      - echo '{{ OS }}'
      - echo '{{ .TASK }}'
      - echo '{{ .LIB }}'
      - echo '{{ .GENERATOR }}'
      - echo '{{ .FOO }}'
    requires:
      vars: [FOO]

  install-libflac:
    desc: download, build libFLAC dep
    platforms: [darwin]
    internal: false
    cmds:
      - sh '{{.DEPS}}/install_libflac.sh'
    generates:
      - '{{.LIB}}/libFLAC.a'
      - '{{.LIB}}/libFLAC++.a'

  install-libmp3lame:
    desc: download, build libmp3lame dep
    platforms: [darwin]
    internal: false
    cmds:
      - sh '{{.DEPS}}/install_libmp3lame.sh'
    generates:
      - '{{.LIB}}/libmp3lame.a'

  install-libmpg123:
    desc: download, build libmpg123 dep
    platforms: [darwin]
    internal: false
    cmds:
      - sh '{{.DEPS}}/install_libmpg123.sh'
    generates:
      - '{{.LIB}}/libmpg123.a'

  install-libogg:
    desc: download, build libogg dep
    platforms: [darwin]
    internal: false
    cmds:
      - sh '{{.DEPS}}/install_libogg.sh'
    generates:
      - '{{.LIB}}/libogg.a'

  install-libopus:
    desc: download, build libopus dep
    platforms: [darwin]
    internal: false
    cmds:
      - sh '{{.DEPS}}/install_libopus.sh'
    generates:
      - '{{.LIB}}/libopus.a'

  install-libvorbis:
    desc: download, build libvorbis dep
    platforms: [darwin]
    internal: false
    cmds:
      - sh '{{.DEPS}}/install_libvorbis.sh'
    generates:
      - '{{.LIB}}/libvorbis.a'
      - '{{.LIB}}/libvorbisenc.a'
      - '{{.LIB}}/libvorbisfile.a'

  install-libsamplerate:
    desc: download, build libsamplerate dep
    platforms: [darwin]
    internal: false
    cmds:
      - sh '{{.DEPS}}/install_libsamplerate.sh'
    generates:
      - '{{.LIB}}/libsamplerate.a'

  install-fluidsynth:
    desc: download, build fluidsynth dep
    platforms: [darwin]
    deps: [install-libsndfile]
    cmds:
      - sh '{{.DEPS}}/install_fluidsynth.sh'

  install-faust:
    desc: download, build faust deps
    platforms: [darwin]
    cmds:
      - sh '{{.DEPS}}/install_faust.sh'
      - sh '{{.DEPS}}/install_libfaust.sh'

  install-libsndfile:
    desc: download, build libsndfile and deps
    platforms: [darwin]
    deps: 
      - install-libmpg123
      - install-libmp3lame
      - install-libopus
      - install-libvorbis
      - install-libflac
      - install-libogg
    cmds:
      - sh '{{.DEPS}}/install_libsndfile.sh'
    generates:
      - '{{.LIB}}/libsndfile.a'

  install-deps-all:
    desc: download, build all deps
    platforms: [darwin]
    cmds:
      - task: install-libsndfile
      - task: install-faust
      - task: install-rubberband
      - task: install-libsamplerate
      - task: install-fluidsynth

  install-rubberband:
    desc: download, build rubberband
    platforms: [darwin]
    cmds:
      - sh '{{.DEPS}}/install_rubberband.sh'
    generates:
      - '{{.LIB}}/librubberband.a'

  install-deps:
    desc: download, build deps from a script
    platforms: [darwin]
    cmd: sh '{{.SCRIPTS}}/install_deps.sh'

  install-deps-nomp3:
    desc: download, build deps no mp3 support
    platforms: [darwin]
    cmd: sh '{{.SCRIPTS}}/install_deps_nomp3.sh'

  install-deps-light:
    desc: download, build minimal deps
    platforms: [darwin]
    cmd: sh '{{.SCRIPTS}}/install_deps_light.sh'

  install-deps-fluidsynth:
    desc: download, build fluidsynth deps
    platforms: [darwin]
    cmd: sh '{{.SCRIPTS}}/install_deps_fluidsynth.sh'

  build:
    desc: build external and default chugins
    platforms: [darwin,windows]
    deps: [clean-externals]
    # aliases: [compile, make]
    cmds:
      - |
        mkdir -p build
        cd build
        cmake {{.GENERATOR}} .. $EXTRA_OPTIONS
        cmake --build . --config $CONFIG
        cmake --install . --config $CONFIG

  build-all:
    desc: build external with all chugins
    platforms: [darwin]
    deps:
      - clean-externals
      - install-faust
    cmds:
      - |
        mkdir -p build
        cd build
        cmake {{.GENERATOR}} .. $EXTRA_OPTIONS \
          -DCM_MACOS_HOMEBREW=ON \
          -DCM_EXTRA_FORMATS=ON \
          -DCM_MP3=ON \
          -DCM_WARPBUF=ON \
          -DCM_FAUST=ON \
          -DCM_FLUIDSYNTH=ON
        cmake --build . --config $CONFIG
        cmake --install . --config $CONFIG

  build-all-src:
    desc: build external, chugins, deps from src
    platforms: [darwin]
    deps:
      - clean-externals
      - install-deps-all
    cmds:
      - |
        mkdir -p build
        cd build
        cmake {{.GENERATOR}} .. $EXTRA_OPTIONS \
          -DCM_EXTRA_FORMATS=ON \
          -DCM_MP3=ON \
          -DCM_WARPBUF=ON \
          -DCM_FAUST=ON \
          -DCM_FLUIDSYNTH=OFF
        cmake --build . --config $CONFIG
        cmake --install . --config $CONFIG

  build-all-src-nodeps:
    desc: build external, chugins from src
    platforms: [darwin]
    deps:
      - clean-externals
    cmds:
      - |
        mkdir -p build
        cd build
        cmake {{.GENERATOR}} .. $EXTRA_OPTIONS \
          -DCM_EXTRA_FORMATS=ON \
          -DCM_MP3=ON \
          -DCM_WARPBUF=ON \
          -DCM_FAUST=ON \
          -DCM_FLUIDSYNTH=OFF
        cmake --build . --config $CONFIG
        cmake --install . --config $CONFIG

  build-chump:
    desc: build chump chuck package manager
    platforms: [darwin]
    deps:
      - clean-externals
    cmds:
      - |
        mkdir -p build
        cd build
        cmake {{.GENERATOR}} .. \
            -DCM_MACOS_HOMEBREW=ON \
            -DCM_CHUMP=ON
        cmake --build . --config $CONFIG
        cmake --install . --config $CONFIG

  clean:
    desc: clean project
    cmds:
      - task: clean-externals
      - rm -rf build

  clean-externals:
    desc: clean externals
    cmds:
      - rm -rf externals
