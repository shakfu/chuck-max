// list of fns that are skipped and need impl

// box2d.h ================================================================
/// Call this to draw shapes and other debug draw data
B2_API void b2World_Draw(b2WorldId worldId, b2DebugDraw* draw);

/// Cast a ray into the world to collect shapes in the path of the ray.
/// Your callback function controls whether you get the closest point, any point, or
/// n-points. The ray-cast ignores shapes that contain the starting point.
///	@param worldId The world to cast the ray against
///	@param origin The start point of the ray
///	@param translation The translation of the ray from the start point to the end
/// point
///	@param filter Contains bit flags to filter unwanted shapes from the results
/// @param fcn A user implemented callback function
/// @param context A user context that is passed along to the callback function
///	@note The callback function may receive shapes in any order
B2_API void b2World_CastRay(b2WorldId worldId, b2Vec2 origin, b2Vec2 translation,
                            b2QueryFilter filter, b2CastResultFcn* fcn, void* context);

/// Cast a circle through the world. Similar to a cast ray except that a circle is cast
/// instead of a point.
B2_API void b2World_CastCircle(b2WorldId worldId, const b2Circle* circle,
                               b2Transform originTransform, b2Vec2 translation,
                               b2QueryFilter filter, b2CastResultFcn* fcn,
                               void* context);

/// Cast a capsule through the world. Similar to a cast ray except that a capsule is
/// cast instead of a point.
B2_API void b2World_CastCapsule(b2WorldId worldId, const b2Capsule* capsule,
                                b2Transform originTransform, b2Vec2 translation,
                                b2QueryFilter filter, b2CastResultFcn* fcn,
                                void* context);

/// Cast a polygon through the world. Similar to a cast ray except that a polygon is
/// cast instead of a point.
B2_API void b2World_CastPolygon(b2WorldId worldId, const b2Polygon* polygon,
                                b2Transform originTransform, b2Vec2 translation,
                                b2QueryFilter filter, b2CastResultFcn* fcn,
                                void* context);

/*
Skipping the cast functions for now because
1. chuck has no good way to pass function pointers for callback
2. could just return an array of b2RayResult for ALL shapes hit along the cast,
but it's not clear how chuck would handle the memory--would it leak?
    - actually if the array is created as an obj array, e.g. of type b2RayResult[]
    i think refcounting is handled correctly

*/

/// Register the custom filter callback. This is optional.
B2_API void b2World_SetCustomFilterCallback(b2WorldId worldId, b2CustomFilterFcn* fcn,
                                            void* context);

/// Register the pre-solve callback. This is optional.
B2_API void b2World_SetPreSolveCallback(b2WorldId worldId, b2PreSolveFcn* fcn,
                                        void* context);

/// Enable/disable constraint warm starting. Advanced feature for testing. Disabling
///	sleeping greatly reduces stability and provides no performance gain.
B2_API void b2World_EnableWarmStarting(b2WorldId worldId, bool flag);

/// Get the current world performance profile
B2_API b2Profile b2World_GetProfile(b2WorldId worldId);

/// Get world counters and sizes
B2_API b2Counters b2World_GetCounters(b2WorldId worldId);

/// Dump memory stats to box2d_memory.txt
B2_API void b2World_DumpMemoryStats(b2WorldId worldId);

{ // these are waiting on joints to be impl
    /// Get the number of joints on this body
    B2_API int b2Body_GetJointCount(b2BodyId bodyId);

    /// Get the joint ids for all joints on this body, up to the provided capacity
    ///	@returns the number of joint ids stored in the user array
    B2_API int b2Body_GetJoints(b2BodyId bodyId, b2JointId * jointArray, int capacity);
}

{ // idk too complicated and edge case rn

    /// Get the maximum capacity required for retrieving all the touching contacts on a
    /// body
    B2_API int b2Body_GetContactCapacity(b2BodyId bodyId);

    /// Get the touching contact data for a body
    B2_API int b2Body_GetContactData(b2BodyId bodyId, b2ContactData * contactData,
                                     int capacity);
}

{ // shape chain methods

    /// Create a chain shape
    ///	@see b2ChainDef for details
    B2_API b2ChainId b2CreateChain(b2BodyId bodyId, const b2ChainDef* def);

    /// Destroy a chain shape
    B2_API void b2DestroyChain(b2ChainId chainId);

    /// Set the chain friction
    /// @see b2ChainDef::friction
    B2_API void b2Chain_SetFriction(b2ChainId chainId, float friction);

    /// Set the chain restitution (bounciness)
    /// @see b2ChainDef::restitution
    B2_API void b2Chain_SetRestitution(b2ChainId chainId, float restitution);

    /// Chain identifier validation. Provides validation for up to 64K allocations.
    B2_API bool b2Chain_IsValid(b2ChainId id);
}

{
    // MISSIN ALL JOINT METHODS
}

// collision.h -----------------------------------------------------------

// skipping this entire group (begins @ line 284):
/**
 * @defgroup distance Distance
 * Functions for computing the distance between shapes.
 *
 * These are advanced functions you can use to perform distance calculations. There
 * are functions for computing the closest points between shapes, doing linear shape
 * casts, and doing rotational shape casts. The latter is called time of impact (TOI).
 * @{
 */

// skipping all the contact manifold / GJK stuff

// ========================================================================
// list of fns that are implemented and need testing
// box2d.h ================================================================
/// Overlap test for all shapes that *potentially* overlap the provided AABB
B2_API void b2World_OverlapAABB(b2WorldId worldId, b2AABB aabb, b2QueryFilter filter,
                                b2OverlapResultFcn* fcn, void* context);

/// Overlap test for for all shapes that overlap the provided circle
B2_API void b2World_OverlapCircle(b2WorldId worldId, const b2Circle* circle,
                                  b2Transform transform, b2QueryFilter filter,
                                  b2OverlapResultFcn* fcn, void* context);

/// Overlap test for all shapes that overlap the provided capsule
B2_API void b2World_OverlapCapsule(b2WorldId worldId, const b2Capsule* capsule,
                                   b2Transform transform, b2QueryFilter filter,
                                   b2OverlapResultFcn* fcn, void* context);

/// Overlap test for all shapes that overlap the provided polygon
B2_API void b2World_OverlapPolygon(b2WorldId worldId, const b2Polygon* polygon,
                                   b2Transform transform, b2QueryFilter filter,
                                   b2OverlapResultFcn* fcn, void* context);

/// Cast a ray into the world to collect the closest hit. This is a convenience
/// function. This is less general than b2World_CastRay() and does not allow for custom
/// filtering.
B2_API b2RayResult b2World_CastRayClosest(b2WorldId worldId, b2Vec2 origin,
                                          b2Vec2 translation, b2QueryFilter filter);

CK_DLL_SFUN(b2_World_CastCircleClosest);
CK_DLL_SFUN(b2_World_CastCapsuleClosest);
CK_DLL_SFUN(b2_World_CastPolygonClosest);

CK_DLL_SFUN(b2_World_EnableSleeping);
CK_DLL_SFUN(b2_World_EnableContinuous);
CK_DLL_SFUN(b2_World_SetRestitutionThreshold);
CK_DLL_SFUN(b2_World_SetHitEventThreshold);
CK_DLL_SFUN(b2_World_SetGravity);
CK_DLL_SFUN(b2_World_GetGravity);
CK_DLL_SFUN(b2_World_Explode);
CK_DLL_SFUN(b2_World_SetContactTuning);